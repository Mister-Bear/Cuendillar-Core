from evennia import Command
from evennia import CmdSet

# Main +buybuild command
class CmdBuyBuild(Command):
    """
    +buybuild

    Start the Character Creation process by spending XP.
    """

    key = "+buybuild"
    locks = "cmd:attr(character_setup_ready, False)"  # Only if not finished
    help_category = "Character Generation"

    def func(self):
        caller = self.caller

        # Safety check
        if caller.db.character_setup_ready:
            caller.msg("|rYou have already completed your character build. Contact staff for a reset.|n")
            return

        # Assign starting XP if missing
        if not caller.db.xp:
            caller.db.xp = 300

        xp = caller.db.xp

        # Display the Main Menu
        menu = (
            "|w=== CUENDILLAR: REFORGED - CHARACTER CREATION ===|n\n"
            f"|cXP Available: {xp}|n\n"
            "\n"
            "|w[1]|n Allocate Core Stats\n"
            "|w[2]|n Allocate One Power Attributes\n"
            "|w[3]|n Learn Skills\n"
            "|w[4]|n Flaws and Advantages\n"
            "|w[5]|n Finish and Lock Character\n"
        )

        caller.msg(menu)
        caller.msg("|y(Type a number to proceed.)|n")

        # Set BuyBuild Mode
        caller.ndb.buybuild_in_progress = True

        # Attach the BuyBuildCmdSet
        caller.cmdset.add("commands.buybuild.BuyBuildCmdSet")

# Command to catch 1-5 input
class CmdBuyBuildInput(Command):
    """
    Handles number input during +buybuild character creation.
    """

    key = "buybuildinput"
    aliases = ["1", "2", "3", "4", "5"]
    locks = "cmd:attr(buybuild_in_progress, True)"
    help_category = "Character Generation"

    def parse(self):
        self.input = self.raw_string.strip()

    def func(self):
        caller = self.caller
        choice = self.input

        if not choice:
            caller.msg("|rPlease type a number to choose an option.|n")
            return

        if choice == "1":
            caller.msg("|wYou chose: Allocate Core Stats! (Coming soon!)|n")

        elif choice == "2":
            caller.msg("|wYou chose: Allocate One Power Attributes! (Coming soon!)|n")

        elif choice == "3":
            caller.msg("|wYou chose: Learn Skills! (Coming soon!)|n")

        elif choice == "4":
            caller.msg("|wYou chose: Flaws and Advantages! (Coming soon!)|n")

        elif choice == "5":
            caller.db.character_setup_ready = True
            caller.ndb.buybuild_in_progress = False
            caller.cmdset.delete("commands.buybuild.BuyBuildCmdSet")
            caller.msg("|gCharacter build complete! You may now play.|n")

        else:
            caller.msg("|rInvalid choice. Please enter a number from the list.|n")

# Temporary command set during BuyBuild
class BuyBuildCmdSet(CmdSet):
    """
    Active only during +buybuild.
    """

    key = "BuyBuildCmdSet"
    priority = 110
    duplicates = True

    def at_cmdset_creation(self):
        from commands.buybuild import CmdBuyBuildInput
        self.add(CmdBuyBuildInput())

class CmdAllocateStats(Command):
    """
    Allocate Core Stats during +buybuild.
    """

    key = "allocatestats"
    locks = "cmd:attr(buybuild_in_progress, True)"
    help_category = "Character Generation"

    def func(self):
        caller = self.caller

        # Set up default values if not already set
        if not caller.db.stats:
            caller.db.stats = {
                "Strength": 2,
                "Dexterity": 2,
                "Intelligence": 2,
                "Charisma": 2,
                "Wisdom": 2,
                "Constitution": 2,
            }

        if not caller.db.xp:
            caller.db.xp = 300

        stats = caller.db.stats
        xp = caller.db.xp

        menu = (
            "|w=== ALLOCATE CORE STATS ===|n\n"
            f"|cXP Remaining: {xp}|n\n\n"
            f"|w[1]|n Strength: {stats['Strength']}\n"
            f"|w[2]|n Dexterity: {stats['Dexterity']}\n"
            f"|w[3]|n Intelligence: {stats['Intelligence']}\n"
            f"|w[4]|n Charisma: {stats['Charisma']}\n"
            f"|w[5]|n Wisdom: {stats['Wisdom']}\n"
            f"|w[6]|n Constitution: {stats['Constitution']}\n\n"
            "|w[7]|n Finish Stat Allocation\n"
            "|y(Type a number to raise that stat by 1 XP)|n"
        )

        caller.msg(menu)
        caller.ndb.stat_allocation_menu = True
